{"version":3,"sources":["components/Uploader.js","graphql/mutations.js","graphql/queries.js","graphql/subscriptions.js","containers/Upload.js","constants.js","components/WatchList.js","containers/Stats.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Uploader","props","useState","rawData","setRawData","tidyCSV","data","map","person","record","subfields","Object","entries","key","value","index","indexOf","prefix","slice","suffix","undefined","tidySubfields","mutation","onSubmitData","useCallback","tidyData","variables","headers","length","keys","tableData","idx","col","className","tag","type","accept","onChange","event","file","target","files","papaparse","parse","header","dynamicTyping","complete","results","filter","ssn","err","console","error","size","INSERT_PEOPLE_MUTATION","gql","STATS_COUNT_QUERY","PEOPLE_SUBSCRIPTION","Upload","useMutation","insertPerson","id","constants","watchList","WatchList","useQuery","locationKeywords","severity","counts","subscribeToMore","useEffect","document","updateQuery","prev","subscriptionData","prevCounts","statsCount","people","inserted","deleted","forEach","keyword","location","description","includes","e","Stats","Header","onStatsClick","window","onClick","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","url","URL","href","httpLink","HttpLink","uri","wsLink","WebSocketLink","replace","options","reconnect","link","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","restore","ReactDOM","render","StrictMode","ApolloProvider","getElementById"],"mappings":"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","file":"static/js/main.0cef7311.chunk.js","sourcesContent":["import { useState, useCallback } from 'react';\nimport papaparse from 'papaparse';\n\nimport \"./Uploader.css\"\n\n\nexport default function Uploader(props) {\n\n    const [rawData, setRawData] = useState([]);\n\n    const tidySubfields = (record) => {\n        const subfields = {};\n        for(const [key, value] of Object.entries(record)) {\n            const index = key.indexOf('_');\n            if (index < 0) continue;\n\n            const prefix = key.slice(0, index);\n            const suffix =  key.slice(index + 1) ;\n            if (subfields[prefix] === undefined) subfields[prefix] = {}\n            subfields[prefix][suffix] = value;\n\n            delete record[key];\n        }\n        record = {...subfields, ...record};\n        return record;\n    }\n\n    const tidyCSV = (data) => {\n        const tidyData = data.map((person) => tidySubfields({...person}));    \n        return tidyData;\n    }\n\n    const selectedFile = (event) => {\n        try {\n            const file = event.target.files[0];\n            papaparse.parse(file, {\n                header: true,\n                dynamicTyping: true,\n                complete: (results) => {\n                    results.data = results.data.filter((person) => person.ssn);\n                    const tidyData = tidyCSV(results.data); \n                    setRawData(results.data);\n                    onSubmitData(tidyData);\n                }\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    const { mutation } = props;\n    const onSubmitData = useCallback(async (tidyData) => {\n        await mutation({variables: {data: tidyData}});\n    }, [mutation]);\n\n\n    const headers = rawData.length > 0 ? Object.keys(rawData[0]) : [];\n    const tableData = rawData.map((record, idx) => \n        <tr key={idx}>\n            {\n                headers.map((col) => <td key={`${idx}_${col}`}>{record[col]}</td>)\n            }\n        </tr>    \n    );\n    return (\n        <div className=\"Uploader\">\n            <div className=\"controls\">\n                <div className=\"tag\">{props.tag}</div>\n                <input type=\"file\" accept=\".csv\" onChange={selectedFile} size=\"32px\" />\n            </div>\n            <table>\n            <tbody>\n                <tr>\n                {headers.map((col) => <th key={col}>{col}</th>)}\n                </tr>\n                {tableData}\n            </tbody>\n            </table>\n        </div>\n    );\n}\n","import { gql } from '@apollo/client';\n\nexport const INSERT_PEOPLE_MUTATION = gql`\n  mutation insertPeople(\n    $data: [PersonInput!]!\n  ) {\n    insertPeople(\n      data: $data\n    ) \n  }\n`;\n","import { gql } from '@apollo/client';\n\n\nexport const STATS_COUNT_QUERY = gql`\n    query statsCount(\n        $locationKeywords: [String!]!\n        $severity: Int\n    ) {\n        statsCount(\n            locationKeywords: $locationKeywords,\n            severity: $severity,\n        )\n    }\n`;\n","import { gql } from '@apollo/client';\n\nexport const PEOPLE_SUBSCRIPTION = gql`\n    subscription {\n        people {\n            inserted {\n                severity\n                location {\n                    description\n                }\n            }\n            deleted {\n                severity\n                location {\n                    description\n                }\n            }\n        }\n    }\n\n`;\n","import { useMutation } from '@apollo/client';\n\nimport Uploader from '../components/Uploader';\nimport {\n    INSERT_PEOPLE_MUTATION,\n} from '../graphql';\n\nimport \"./Upload.css\";\n\n\nexport default function Upload() {\n    const [insertPerson] = useMutation(INSERT_PEOPLE_MUTATION);\n    return <div id=\"Upload\">\n        <div id=\"PeopleUploader\">\n            <Uploader tag=\"People\" mutation={insertPerson}/>\n        </div>\n    </div>;\n}\n","const constants = {\n    watchList: [\n        \"基隆市\",\n        \"臺北市\",\n        \"新北市\",\n        \"桃園市\",\n        \"新竹市\",\n        \"新竹縣\",\n        \"苗栗縣\",\n        \"臺中市\",\n        \"彰化縣\",\n        \"南投縣\",\n        \"雲林縣\",\n        \"嘉義市\",\n        \"嘉義縣\",\n        \"臺南市\",\n        \"高雄市\",\n        \"屏東縣\",\n        \"宜蘭縣\",\n        \"花蓮縣\",\n        \"臺東縣\",\n        \"澎湖縣\",\n        \"金門縣\",\n        \"連江縣\",\n    ]\n}\n\nexport default constants;","import { useQuery } from '@apollo/client';\nimport { useEffect } from 'react';\n\nimport constants from '../constants';\nimport { STATS_COUNT_QUERY, PEOPLE_SUBSCRIPTION } from '../graphql';\n\n\nexport default function WatchList(props) {\n\n    const {data: counts, subscribeToMore} = useQuery(\n        STATS_COUNT_QUERY,\n        {\n            variables: {locationKeywords: constants.watchList, severity: 1}\n        }\n    );\n\n    useEffect(() => {\n        try {\n            subscribeToMore({\n                document: PEOPLE_SUBSCRIPTION,\n                updateQuery: (prev, { subscriptionData }) => {\n                    const prevCounts = [...prev.statsCount];\n                    const { inserted, deleted } = subscriptionData.data.people;\n                    inserted.forEach(person => {\n                        if (person.severity === 0) return;\n                        constants.watchList.forEach((keyword, idx) => {\n                            if (person.location.description.includes(keyword)) {\n                                prevCounts[idx] += 1;\n                            }\n                        })\n                    })\n                    deleted.forEach(person => {\n                        if (person.severity === 0) return;\n                        constants.watchList.forEach((keyword, idx) => {\n                            if (person.location.description.includes(keyword)) {\n                                prevCounts[idx] -= 1;\n                            }\n                        })\n                    })\n\n                    return {\n                        statsCount: prevCounts,\n                    }\n                },\n            })\n        } catch(e) {\n            console.error(e);\n        }\n    }, [subscribeToMore])\n    \n    return (\n        <table>\n        <tbody>\n            <tr>\n                <th>Keyword</th>\n                <th>Count</th>\n            </tr>\n            {\n                constants.watchList.map(\n                    (keyword, idx) => \n                    <tr key={keyword}>\n                        <td>{keyword}</td>\n                        <td id={`count-${idx}`}>{!counts || ! counts.statsCount || counts.statsCount[idx]}</td>\n                    </tr>\n                )\n            }\n        </tbody>\n        </table>\n    );\n}","import WatchList from '../components/WatchList';\n\nimport \"./Stats.css\";\n\nexport default function Stats() {\n\n    return <div className=\"Stats\">\n        <WatchList />\n    </div>\n}\n","import \"./Header.css\";\n\n\nexport default function Header() {\n    const onStatsClick = () => {\n        window.location = \"/\";\n    }\n    const onUploadClick = () => {\n        window.location = \"/upload\";\n    }\n    return (\n        <div className=\"Header\">\n            <div onClick={onStatsClick} className=\"slogan\">\n                確診個案追蹤系統\n            </div>\n            <div className=\"control\">\n                <div className= \"button\" onClick={onStatsClick}> 統計表 </div>\n                <div className= \"button\" onClick={onUploadClick}> 上傳 </div>\n            </div>\n        </div>\n    );\n};","import {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\nimport Upload from './containers/Upload';\nimport Stats from './containers/Stats';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header />\n        <Router>\n            <Switch>\n                <Route path=\"/upload\">\n                    <Upload/>\n                </Route>\n                <Route path=\"/\">\n                    <Stats/>\n                </Route>\n            </Switch>\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n} from \"@apollo/client\";\nimport { split } from \"apollo-link\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst url = new URL(\"/graphql\", window.location.href);\n\n// Create an http link:\nconst httpLink = new HttpLink({\n  // uri: 'http://localhost:5000/graphql',\n  uri: url.href,\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  // uri: `ws://localhost:5000/graphql`,\n  uri: url.href.replace(\"http\", \"ws\"),\n  options: { reconnect: true },\n});\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === \"subscription\"\n    );\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache().restore({}),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}